{"version":3,"sources":["reducers/user.js","actions/index.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/CurrencyInput.js","components/NewExpenseForm.js","components/EditExpenseForm.js","components/ExpenseItem.js","components/ExpensesTable.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","userReducer","state","action","type","payload","currencies","expenses","isEditingExpense","editingExpenseId","walletReducer","filter","id","expenseIndex","findIndex","newExpenses","rootReducer","combineReducers","user","wallet","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","props","isEmailValid","password","isPasswordValid","handleEmailChange","bind","handlePasswordChange","handleLogin","value","target","this","validateEmail","setState","string","match","validatePassword","trim","length","e","preventDefault","userLogin","loggedEmail","to","className","onSubmit","autoComplete","name","placeholder","data-testid","required","onChange","disabled","React","Component","connect","dispatch","userLoginAction","Header","total","reduce","acc","expense","exchangeRate","Number","exchangeRates","currency","ask","toFixed","userEmail","renderTotalExpense","VALID_FIRST","VALID_NEXT","CurrencyInput","handleKeyDown","event","onValueChange","key","keyCode","test","nextValue","valueString","toString","nextValueString","parseInt","slice","MAX_SAFE_INTEGER","Math","trunc","abs","isFinite","isNaN","console","log","Error","valueDisplay","toLocaleString","style","htmlFor","inputMode","onKeyDown","NewExpenseForm","currencyOptions","newExpense","description","method","tag","handleInputChange","handleSubmit","handleValueChange","fetch","then","response","json","data","currencyCodes","Object","values","map","code","Set","oldState","submitNewExpense","apiResponse","currencyCode","vaue","renderCurrencyInput","renderValueInput","renderDescriptionInput","renderPaymentMethodInput","renderTagInput","onClick","submitExpenseAction","EditExpenseForm","find","handleSaveExpense","saveExpense","keys","ExpenseItem","handleDeleteExpense","editExpense","deleteExpense","formattedValue","currencyName","convertedValue","split","handleEditExpense","deleteExpenseAction","editExpenseAction","ExpensesTable","Wallet","defaultProps","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f366ee37.chunk.js","sourcesContent":["import { USER_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_LOGIN:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","export const USER_LOGIN = 'USER_LOGIN';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\n\nexport const userLoginAction = (email) => ({\n  type: USER_LOGIN,\n  payload: email,\n});\n\nexport const submitExpenseAction = (payload) => ({\n  type: ADD_EXPENSE,\n  payload,\n});\n\nexport const deleteExpenseAction = (id) => ({\n  type: DELETE_EXPENSE,\n  id,\n});\n\nexport const editExpenseAction = (id) => ({\n  type: EDIT_EXPENSE,\n  id,\n});\n\nexport const saveExpenseAction = (payload) => ({\n  type: SAVE_EXPENSE,\n  payload,\n});\n","import { ADD_EXPENSE, DELETE_EXPENSE, EDIT_EXPENSE, SAVE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isEditingExpense: false,\n  editingExpenseId: '',\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case DELETE_EXPENSE:\n    return { ...state, expenses: state.expenses.filter(({ id }) => id !== action.id) };\n  case EDIT_EXPENSE:\n    return { ...state, isEditingExpense: true, editingExpenseId: action.id };\n  case SAVE_EXPENSE: {\n    const expenseIndex = state.expenses.findIndex(({ id }) => id === action.payload.id);\n    const newExpenses = [...state.expenses];\n    newExpenses[expenseIndex] = { ...action.payload };\n    return { ...state, expenses: newExpenses, isEditingExpense: false };\n  }\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\n\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { userLoginAction } from '../actions';\n\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      isEmailValid: false,\n      password: '',\n      isPasswordValid: false,\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  handleEmailChange({ target }) {\n    const { value } = target;\n    const isEmailValid = this.validateEmail(value);\n    this.setState({ email: value, isEmailValid });\n  }\n\n  validateEmail(string) {\n    const regex = /^[\\w+.]+@\\w+\\.\\w{2,}(?:\\.\\w{2})?$/;\n    if (string.match(regex)) {\n      return true;\n    }\n    return false;\n  }\n\n  handlePasswordChange({ target }) {\n    const { value } = target;\n    const isPasswordValid = this.validatePassword(value);\n    this.setState({ password: value, isPasswordValid });\n  }\n\n  validatePassword(string) {\n    const minLength = 6;\n    return string.trim().length >= minLength;\n  }\n\n  handleLogin(e) {\n    e.preventDefault();\n    const { userLogin } = this.props;\n    const { email } = this.state;\n    userLogin(email);\n  }\n\n  render() {\n    const { isEmailValid, isPasswordValid, email, password } = this.state;\n    const { loggedEmail } = this.props;\n\n    if (loggedEmail) {\n      return <Redirect to=\"/carteira\" />;\n    }\n\n    return (\n      <div className=\"login-container\">\n        <h1>TrybeWallet</h1>\n        <form onSubmit={ this.handleLogin } className=\"login-form\" autoComplete=\"off\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"E-mail\"\n            data-testid=\"email-input\"\n            required\n            onChange={ this.handleEmailChange }\n            value={ email }\n          />\n          <p className=\"login-validation-error\">\n            { (!isEmailValid && email.length > 0) && 'Digite um email válido'}\n          </p>\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Senha\"\n            data-testid=\"password-input\"\n            onChange={ this.handlePasswordChange }\n            value={ password }\n            required\n          />\n          <p className=\"login-validation-error\">\n            { (!isPasswordValid && password.length > 0)\n            && 'Sua senha deve conter no mínimo 6 dígitos'}\n          </p>\n          <button\n            type=\"submit\"\n            disabled={ !isEmailValid || !isPasswordValid }\n          >\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loggedEmail: state.user.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  userLogin: (email) => dispatch(userLoginAction(email)),\n});\n\nLogin.propTypes = {\n  userLogin: PropTypes.func.isRequired,\n  loggedEmail: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport './Header.css';\n\nclass Header extends Component {\n  renderTotalExpense(expenses) {\n    const total = expenses.reduce((acc, expense) => {\n      const exchangeRate = Number(expense.exchangeRates[expense.currency].ask);\n      const price = Number(expense.value) * exchangeRate;\n      return acc + price;\n    }, 0);\n\n    return (\n      <p>\n        {`Gasto total: ${(total / 100).toFixed(2)} `}\n        <span data-testid=\"header-currency-field\">BRL</span>\n      </p>);\n  }\n\n  render() {\n    const { userEmail, expenses } = this.props;\n    return (\n      <header className=\"header-container\">\n        <h1 className=\"header-title\">TrybeWallet</h1>\n        <div className=\"header-info\">\n          <p data-testid=\"email-field\">\n            Usuário:\n            {' '}\n            {userEmail}\n          </p>\n          {this.renderTotalExpense(expenses)}\n        </div>\n      </header>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n  })).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","/* eslint-disable complexity */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst VALID_FIRST = /^[1-9]{1}$/;\nconst VALID_NEXT = /^[0-9]{1}$/;\nconst DELETE_KEY_CODE = 8;\n\nexport default class CurrencyInput extends Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleKeyDown(event) {\n    const { value, onValueChange } = this.props;\n    const { key, keyCode } = event;\n\n    if (\n      (value === 0 && !VALID_FIRST.test(key))\n      || (value !== 0 && !VALID_NEXT.test(key)\n      && keyCode !== DELETE_KEY_CODE)\n    ) {\n      return;\n    }\n\n    const valueString = value.toString();\n\n    let nextValue;\n    if (keyCode !== DELETE_KEY_CODE) {\n      const nextValueString = value === 0 ? key : `${valueString}${key}`;\n      nextValue = Number.parseInt(nextValueString, 10);\n    } else {\n      const lastElementIndex = -1;\n      const nextValueString = valueString.slice(0, lastElementIndex);\n      nextValue = nextValueString === '' ? 0 : Number.parseInt(nextValueString, 10);\n    }\n\n    if (nextValue > Number.MAX_SAFE_INTEGER) {\n      return;\n    }\n\n    onValueChange(nextValue);\n  }\n\n  render() {\n    const { value, currency } = this.props;\n    const valueAbsTrunc = Math.trunc(Math.abs(value));\n    if (value !== valueAbsTrunc || !Number.isFinite(value) || Number.isNaN(value)) {\n      console.log(typeof value);\n      throw new Error('invalid value property');\n    }\n\n    const valueDisplay = (value / 100).toLocaleString('pt-BR', {\n      style: 'currency',\n      currency,\n    });\n\n    return (\n      <label htmlFor=\"value-input\">\n        Valor:\n        <input\n          id=\"value-input\"\n          inputMode=\"numeric\"\n          value={ valueDisplay }\n          onKeyDown={ this.handleKeyDown }\n          onChange={ () => {} }\n        />\n      </label>\n    );\n  }\n}\n\nCurrencyInput.propTypes = {\n  value: PropTypes.number.isRequired,\n  currency: PropTypes.string.isRequired,\n  onValueChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CurrencyInput from './CurrencyInput';\n\nimport { submitExpenseAction } from '../actions';\n\nimport './NewExpenseForm.css';\n\nclass NewExpenseForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currencyOptions: [],\n      newExpense: {\n        value: 0,\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n      },\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((data) => {\n        const currencyCodes = Object.values(data).map(({ code }) => code);\n        this.setState({ currencyOptions: [...new Set(currencyCodes)] });\n      });\n  }\n\n  handleInputChange({ target }) {\n    const { name, value } = target;\n    this.setState(({ newExpense }) => ({ newExpense: { ...newExpense, [name]: value } }));\n  }\n\n  handleValueChange(value) {\n    this.setState((oldState) => ({\n      ...oldState,\n      newExpense: { ...oldState.newExpense, value } }));\n  }\n\n  async handleSubmit() {\n    const { newExpense } = this.state;\n    const { expenses, submitNewExpense } = this.props;\n\n    const apiResponse = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const exchangeRates = await apiResponse.json();\n\n    const expense = {\n      id: expenses.length,\n      ...newExpense,\n      exchangeRates,\n    };\n\n    submitNewExpense(expense);\n\n    this.setState({\n      newExpense: {\n        value: 0,\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n      },\n    });\n  }\n\n  renderValueInput() {\n    const { newExpense: { value, currency } } = this.state;\n    return (\n      <CurrencyInput\n        id=\"value-input\"\n        value={ value }\n        currency={ currency }\n        onValueChange={ this.handleValueChange }\n      />\n    );\n  }\n\n  renderDescriptionInput() {\n    const { newExpense: { description } } = this.state;\n    return (\n      <label htmlFor=\"description-input\">\n        Descrição:\n        <input\n          id=\"description-input\"\n          name=\"description\"\n          value={ description }\n          onChange={ this.handleInputChange }\n        />\n      </label>\n    );\n  }\n\n  renderCurrencyInput() {\n    const { currencyOptions, newExpense: { currency } } = this.state;\n    return (\n      <label htmlFor=\"currency-input\">\n        Moeda:\n        <select\n          id=\"currency-input\"\n          name=\"currency\"\n          value={ currency }\n          onChange={ this.handleInputChange }\n        >\n          {\n            currencyOptions.map((currencyCode) => (\n              <option key={ currencyCode } value={ currencyCode }>{currencyCode}</option>\n            ))\n          }\n        </select>\n      </label>\n    );\n  }\n\n  renderPaymentMethodInput() {\n    const { newExpense: { method } } = this.state;\n    return (\n      <label htmlFor=\"method-input\">\n        Método de pagamento:\n        <select\n          id=\"method-input\"\n          name=\"method\"\n          value={ method }\n          onChange={ this.handleInputChange }\n        >\n          <option vaue=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderTagInput() {\n    const { newExpense: { tag } } = this.state;\n    return (\n      <label htmlFor=\"tag-input\">\n        Tag:\n        <select\n          id=\"tag-input\"\n          name=\"tag\"\n          value={ tag }\n          onChange={ this.handleInputChange }\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <form className=\"expense-form\">\n        {this.renderCurrencyInput()}\n        {this.renderValueInput()}\n        {this.renderDescriptionInput()}\n        {this.renderPaymentMethodInput()}\n        {this.renderTagInput()}\n        <button type=\"button\" onClick={ this.handleSubmit }>Adicionar despesa</button>\n      </form>\n    );\n  }\n}\n\nNewExpenseForm.propTypes = {\n  submitNewExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n  })).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitNewExpense: (payload) => dispatch(submitExpenseAction(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewExpenseForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveExpenseAction } from '../actions';\nimport CurrencyInput from './CurrencyInput';\n\nclass EditExpenseForm extends Component {\n  constructor(props) {\n    super(props);\n    const { expenses, editingExpenseId } = this.props;\n    const {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    } = expenses.find((expense) => expense.id === editingExpenseId);\n    this.state = {\n      expense: {\n        id,\n        value,\n        description,\n        currency,\n        method,\n        tag,\n        exchangeRates,\n      },\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.renderValueInput = this.renderValueInput.bind(this);\n    this.renderDescriptionInput = this.renderDescriptionInput.bind(this);\n    this.renderTagInput = this.renderTagInput.bind(this);\n    this.renderPaymentMethodInput = this.renderPaymentMethodInput.bind(this);\n    this.renderCurrencyInput = this.renderCurrencyInput.bind(this);\n    this.handleSaveExpense = this.handleSaveExpense.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  handleInputChange({ target }) {\n    const { name, value } = target;\n    this.setState(({ expense }) => ({ expense: { ...expense, [name]: value } }));\n  }\n\n  handleValueChange(value) {\n    this.setState(({ expense }) => ({ expense: { ...expense, value } }));\n  }\n\n  handleSaveExpense() {\n    const { saveExpense } = this.props;\n    const { expense } = this.state;\n    saveExpense({ ...expense });\n  }\n\n  renderValueInput() {\n    const { expense: { value, currency } } = this.state;\n    return (\n      <CurrencyInput\n        id=\"value-input\"\n        value={ value }\n        currency={ currency }\n        onValueChange={ this.handleValueChange }\n      />\n    );\n  }\n\n  renderDescriptionInput() {\n    const { expense: { description } } = this.state;\n    return (\n      <label htmlFor=\"description-input\">\n        Descrição:\n        <input\n          data-testid=\"description-input\"\n          name=\"description\"\n          value={ description }\n          onChange={ this.handleInputChange }\n        />\n      </label>\n    );\n  }\n\n  renderCurrencyInput() {\n    const { expense: { currency, exchangeRates } } = this.state;\n    return (\n      <label htmlFor=\"currency-input\">\n        Moeda:\n        <select\n          id=\"currency-input\"\n          data-testid=\"currency-input\"\n          name=\"currency\"\n          value={ currency }\n          onChange={ this.handleInputChange }\n        >\n          {\n            Object.keys(exchangeRates).map((currencyCode) => (\n              <option key={ currencyCode } value={ currencyCode }>{currencyCode}</option>\n            ))\n          }\n        </select>\n      </label>\n    );\n  }\n\n  renderPaymentMethodInput() {\n    const { expense: { method } } = this.state;\n    return (\n      <label htmlFor=\"method-input\">\n        Método de pagamento:\n        <select\n          id=\"method-input\"\n          data-testid=\"method-input\"\n          name=\"method\"\n          value={ method }\n          onChange={ this.handleInputChange }\n        >\n          <option vaue=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderTagInput() {\n    const { expense: { tag } } = this.state;\n    return (\n      <label htmlFor=\"tag\">\n        Tag:\n        <select\n          id=\"tag-input\"\n          data-testid=\"tag-input\"\n          name=\"tag\"\n          value={ tag }\n          onChange={ this.handleInputChange }\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <form className=\"expense-form\">\n        {this.renderCurrencyInput()}\n        {this.renderValueInput()}\n        {this.renderDescriptionInput()}\n        {this.renderPaymentMethodInput()}\n        {this.renderTagInput()}\n        <button type=\"button\" onClick={ this.handleSaveExpense }>Editar despesa</button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  editingExpenseId: state.wallet.editingExpenseId,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expense) => dispatch(saveExpenseAction(expense)),\n});\n\nEditExpenseForm.propTypes = {\n  saveExpense: PropTypes.func.isRequired,\n  editingExpenseId: PropTypes.number.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    description: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditExpenseForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpenseAction, editExpenseAction } from '../actions';\n\nclass ExpenseItem extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDeleteExpense = this.handleDeleteExpense.bind(this);\n  }\n\n  handleEditExpense(id) {\n    const { editExpense } = this.props;\n    editExpense(id);\n  }\n\n  handleDeleteExpense(id) {\n    const { deleteExpense } = this.props;\n    deleteExpense(id);\n  }\n\n  render() {\n    const { expense } = this.props;\n    const formattedValue = (expense.value / 100).toFixed(2);\n    const exchangeRate = Number(expense.exchangeRates[expense.currency].ask);\n    const currencyName = expense.exchangeRates[expense.currency].name;\n    const convertedValue = Number(expense.value / 100) * exchangeRate;\n    return (\n      <tr>\n        <td>{ expense.description }</td>\n        <td>{ expense.tag }</td>\n        <td>{ expense.method }</td>\n        <td>{ formattedValue }</td>\n        <td>{ currencyName.split('/')[0] }</td>\n        <td>{ exchangeRate.toFixed(2) }</td>\n        <td>{ convertedValue.toFixed(2) }</td>\n        <td>Real</td>\n        <td>\n          <button\n            type=\"button\"\n            data-testid=\"edit-btn\"\n            onClick={ () => this.handleEditExpense(expense.id) }\n          >\n            Editar\n\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"delete-btn\"\n            onClick={ () => this.handleDeleteExpense(expense.id) }\n          >\n            Excluir\n\n          </button>\n        </td>\n      </tr>\n    );\n  }\n}\n\nExpenseItem.propTypes = {\n  deleteExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n  expense: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    description: PropTypes.string.isRequired,\n    tag: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    currency: PropTypes.string.isRequired,\n    exchangeRates: PropTypes.shape({\n      name: PropTypes.string,\n      ask: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(deleteExpenseAction(id)),\n  editExpense: (id) => dispatch(editExpenseAction(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(ExpenseItem);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ExpenseItem from './ExpenseItem';\n\nimport './ExpensesTable.css';\n\nclass ExpensesTable extends Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.map((expense) => (\n            <ExpenseItem key={ expense.id } expense={ expense } />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    tag: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired,\n    currency: PropTypes.string.isRequired,\n  })).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(ExpensesTable);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport NewExpenseForm from '../components/NewExpenseForm';\nimport EditExpenseForm from '../components/EditExpenseForm';\nimport ExpensesTable from '../components/ExpensesTable';\n\nimport './Wallet.css';\n\nclass Wallet extends React.Component {\n  render() {\n    const { isEditingExpense } = this.props;\n    return (\n      <div className=\"wallet-page-container\">\n        <Header />\n        { isEditingExpense ? <EditExpenseForm /> : <NewExpenseForm /> }\n        <ExpensesTable />\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  isEditingExpense: PropTypes.bool,\n};\n\nWallet.defaultProps = {\n  isEditingExpense: false,\n};\n\nconst mapStateToProps = (state) => ({\n  isEditingExpense: state.wallet.isEditingExpense,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}